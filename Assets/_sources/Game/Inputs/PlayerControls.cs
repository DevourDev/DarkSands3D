//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_sources/Game/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Inputs
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""0b8822b1-ab8f-4d0c-8d3a-aff71e74a7f4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ad7e9e29-7c6e-4c71-921d-15851218d04c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StealthMode"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7fc8a7b2-9d4c-4a8c-ab28-bbb0ecd3b679"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""fdd5172e-0b8d-43f8-9909-675c5211cf54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrepareForAttack"",
                    ""type"": ""Button"",
                    ""id"": ""cdefd2c3-48d5-48ec-93ae-c38b587c781a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""85cb8632-a66f-4bc6-aeeb-41c0ec68f284"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96f78a3e-5e3e-4afa-8261-c6d32a29b643"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4ca3c52-cec8-46fb-851e-107fd30f6f1c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrepareForAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad16deef-4ba1-44c3-91bb-08811af011ae"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StealthMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WSAD"",
                    ""id"": ""f06c76bd-1fdc-4c8b-8c37-6856bac3ceb9"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""99bcf57b-a9a8-4fd3-9aa7-a5fd7bb8160e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""64e8e5b7-d092-435c-bba9-d556f3c138a4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""164e1bb1-82b6-4647-a8e1-52a16ae528d4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ff027cf5-4f3f-4645-b4b6-43e1ad849e19"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6afdd3dd-6816-4486-ad2b-03b263a1cf57"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Move = m_Character.FindAction("Move", throwIfNotFound: true);
            m_Character_StealthMode = m_Character.FindAction("StealthMode", throwIfNotFound: true);
            m_Character_Dash = m_Character.FindAction("Dash", throwIfNotFound: true);
            m_Character_PrepareForAttack = m_Character.FindAction("PrepareForAttack", throwIfNotFound: true);
            m_Character_Interact = m_Character.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character
        private readonly InputActionMap m_Character;
        private ICharacterActions m_CharacterActionsCallbackInterface;
        private readonly InputAction m_Character_Move;
        private readonly InputAction m_Character_StealthMode;
        private readonly InputAction m_Character_Dash;
        private readonly InputAction m_Character_PrepareForAttack;
        private readonly InputAction m_Character_Interact;
        public struct CharacterActions
        {
            private @PlayerControls m_Wrapper;
            public CharacterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Character_Move;
            public InputAction @StealthMode => m_Wrapper.m_Character_StealthMode;
            public InputAction @Dash => m_Wrapper.m_Character_Dash;
            public InputAction @PrepareForAttack => m_Wrapper.m_Character_PrepareForAttack;
            public InputAction @Interact => m_Wrapper.m_Character_Interact;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMove;
                    @StealthMode.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnStealthMode;
                    @StealthMode.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnStealthMode;
                    @StealthMode.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnStealthMode;
                    @Dash.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @PrepareForAttack.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPrepareForAttack;
                    @PrepareForAttack.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPrepareForAttack;
                    @PrepareForAttack.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPrepareForAttack;
                    @Interact.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_CharacterActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @StealthMode.started += instance.OnStealthMode;
                    @StealthMode.performed += instance.OnStealthMode;
                    @StealthMode.canceled += instance.OnStealthMode;
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                    @PrepareForAttack.started += instance.OnPrepareForAttack;
                    @PrepareForAttack.performed += instance.OnPrepareForAttack;
                    @PrepareForAttack.canceled += instance.OnPrepareForAttack;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public CharacterActions @Character => new CharacterActions(this);
        public interface ICharacterActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnStealthMode(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnPrepareForAttack(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
